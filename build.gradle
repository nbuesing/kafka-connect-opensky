import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'java'
    id 'jacoco'
    id 'distribution'
    id 'com.avast.gradle.docker-compose' version '0.9.1'
}

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url "https://packages.confluent.io/maven/"
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

dependencies {

    compileOnly group: 'org.apache.kafka', name: 'connect-api', version: kafka_version

    implementation group: 'com.fasterxml.jackson.core', name:'jackson-databind', version: jackson_version
    implementation group: 'com.fasterxml.jackson.core', name:'jackson-annotations', version: jackson_version
    implementation group: 'com.fasterxml.jackson.core', name:'jackson-core', version: jackson_version

    implementation group: 'org.apache.commons', name: 'commons-text', version: commons_text_version

    implementation group: 'io.github.openfeign', name: 'feign-core', version: feign_version
    implementation group: 'io.github.openfeign', name: 'feign-jackson', version: feign_version

    implementation group: 'org.slf4j', name: 'slf4j-api', version: slf4j_version

    compileOnly group: 'org.projectlombok', name: 'lombok', version: lombok_version
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombok_version

    testImplementation group: 'com.github.tomakehurst', name: 'wiremock', version: wiremock_version

    testImplementation group: 'org.mockito', name: 'mockito-core', version: mockito_version

    testImplementation group: 'org.junit-pioneer', name: 'junit-pioneer', version: junit_pioneer_version
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junit_version
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: junit_version
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junit_version

    testImplementation group: 'org.apache.kafka', name: 'connect-api', version: kafka_version
}


jacoco {
    toolVersion = "0.8.10"
}

jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.required = true
        html.outputLocation.set(layout.buildDirectory.dir("reports/jacoco/html"))
    }
}

task connectStandalone(type: Copy) {
    from(configurations.runtimeClasspath)
    from("build/libs/kafka-connect-opensky.jar")
    into("build/connect/opensky") 
}


jar {
    archiveBaseName = 'kafka-connect-opensky'
}

distributions {
    main {
        contents {
            from("docs/manifest.json") {
                //filter { line -> line.toUpperCase() }
                filter(ReplaceTokens, tokens: [
                        name: "${project.name}" as String,
                        version: "${project.version}" as String
                    ]
                )
            }
            into("doc/") {
                from(project.projectDir) {
                    include("LICENSE*")
                    include("README*")
                    include("NOTICE*")
                }
                from("${project.projectDir}/docs") {
                    include("*.png")
                }
            }
            into("etc/") {
                from("config")
            }
            into("assets/") {
            }
            into("lib/") {
                from(jar)
                from(configurations.runtimeClasspath)
            }
        }
    }
}

test {
    useJUnitPlatform()
}

tasks {
    composeUp {
        dependsOn(distZip)
    }
}

dockerCompose {
    useComposeFiles = ["docker-compose.yml"]
}
