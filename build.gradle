import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'java'
    id 'groovy'
    id 'idea'
    id 'jacoco'
    id 'distribution'
    id 'com.avast.gradle.docker-compose' version '0.9.1'
}

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url "http://packages.confluent.io/maven/"
    }
}

dependencies {

    compileOnly group: 'org.apache.kafka', name: 'connect-api', version: kafka_version

    implementation group: 'org.apache.commons', name: 'commons-text', version: commons_text_version
    implementation group: 'com.squareup.retrofit2', name: 'retrofit', version: retrofit2_version
    implementation group: 'com.squareup.retrofit2', name: 'converter-jackson', version: retrofit2_version

    compileOnly group: 'org.projectlombok', name: 'lombok', version: lombok_version
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombok_version

    testImplementation group: 'junit', name: 'junit', version: junit_version
    testImplementation group: 'org.spockframework', name: 'spock-core', version: spockframework_version
    testImplementation group: 'com.github.tomakehurst', name: 'wiremock', version: wiremock_version

    testImplementation group: 'org.apache.kafka', name: 'connect-api', version: kafka_version
}

idea {
    module {
        inheritOutputDirs = false
        outputDir = compileJava.destinationDir
        testOutputDir = compileTestJava.destinationDir
    }
}

jacoco {
    toolVersion = "0.8.2"
}

jacocoTestReport {
    reports {
        xml.enabled = false
        csv.enabled = false
        html.destination file("${buildDir}/reports/jacoco/html")
    }
}

task connectStandalone(type: Copy) {
    from(configurations.runtimeClasspath)
    from("build/libs/kafka-connect-opensky.jar")
    into("build/connect/opensky") 
}


jar {
    baseName = 'kafka-connect-opensky'
}

distributions {
    main {
        baseName = "kafka-connect-opensky"
        contents {
            from("docs/manifest.json") {
                //filter { line -> line.toUpperCase() }
                filter(ReplaceTokens, tokens: [
                        name: "${project.name}" as String,
                        version: "${project.version}" as String
                    ]
                )
            }
            into("doc/") {
                from(project.projectDir) {
                    include("LICENSE*")
                    include("README*")
                    include("NOTICE*")
                }
                from("${project.projectDir}/docs") {
                    include("*.png")
                }
            }
            into("etc/") {
                from("config")
            }
            into("assets/") {
            }
            into("lib/") {
                from(jar)
                from(configurations.runtimeClasspath)
            }
        }
    }
}

tasks {
    composeUp {
        dependsOn(distZip)
    }
}

dockerCompose {
    useComposeFiles = ["docker-compose.yml"]
}
