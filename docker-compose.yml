
volumes:
  zk: {}
  zk_log: {}
  bk: {}

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.1
    hostname: zookeeper
    ports:
      - "2181:2181"
    volumes:
      - zk:/var/lib/zookeeper/data
      - zk_log:/var/lib/zookeeper/log
    healthcheck:
      test: echo ruok | nc -w 2 localhost 2181 | grep imok
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 3
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      KAFKA_OPTS: "-Dzookeeper.4lw.commands.whitelist=ruok,stat"

  broker:
    image: confluentinc/cp-enterprise-kafka:7.2.1
    hostname: broker
    depends_on:
      - zookeeper
    ports:
      - "19092:19092"
    volumes:
      - bk:/var/lib/kafka/data
    stop_grace_period: 120s
    healthcheck:
      test: nc -z localhost 9092 || exit 1
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 3
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,PLAINTEXT_HOST://localhost:19092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0

  schema-registry:
    image: confluentinc/cp-schema-registry:7.2.1
    hostname: schema-registry
    ports: 
      - "8081:8081"
    depends_on:
      - zookeeper
      - broker
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:2181'
      SCHEMA_REGISTRY_LOG4J_OPTS: '-Dlog4j.configuration=file:/etc/schema-registry/quiet-logging.properties'
    volumes:
      - ./schema-registry/log4j.properties:/etc/schema-registry/quiet-logging.properties
        
  connect:
#    image: nbuesing/kafka-connect-opensky:1.0.0
    build:
      context: .
      dockerfile: Dockerfile
    hostname: connect
    restart: always
    ports:
      - '58083:8083'
    depends_on:
      - zookeeper
      - broker
    environment:
      CONNECT_BOOTSTRAP_SERVERS: broker:9092
      CONNECT_REST_PORT: 8083
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR"

  ksql-server:
    image: confluentinc/cp-ksqldb-server:7.2.1
    hostname: ksql-server
    depends_on:
      - broker
      - connect
#    ports:
#      - "8088:8088"
    volumes:
      - ./ext:/etc/ksql/ext
    environment:
      KSQL_CONFIG_DIR: /etc/ksql
      KSQL_KSQL_EXTENSION_DIR: "/etc/ksql/ext"
      KSQL_UDFS_ENABLED: "true"
      KSQL_LOG4J_OPTS: "-Dlog4j.configuration=file:/etc/ksql/log4j-rolling.properties"
      KSQL_LOG4J_ROOT_LOGLEVEL: DEBUG
      KSQL_TOOLS_LOG4J_LOGLEVEL: DEBUG
      KSQL_BOOTSTRAP_SERVERS: "broker:9092"
      KSQL_HOST_NAME: ksql-server
      KSQL_APPLICATION_ID: "ksql-server"
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      KSQL_PRODUCER_INTERCEPTOR_CLASSES: ""
      KSQL_CONSUMER_INTERCEPTOR_CLASSES: ""

  ksql-cli:
    image: confluentinc/cp-ksqldb-cli:7.2.1
    depends_on:
      - broker
      - ksql-server
    entrypoint: /bin/sh
    tty: true

  elasticsearch:
    image: elasticsearch:8.4.3
    container_name: elasticsearch
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      xpack.security.enabled: "false"
      discovery.type: single-node
      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
    volumes: 
      - ./data/container_data/elasticserarch:/usr/share/elasticsearch/data

  kibana:
    image: kibana:8.4.3
    container_name: kibana
    depends_on:
      - elasticsearch
    ports:
      - 5601:5601
    environment:
      xpack.security.enabled: "false"
      discovery.type: "single-node"


